Terminals unused in grammar

    '<'
    '>'


Grammar

    0 $accept: PROGRAM $end

    1 PROGRAM: FUNCTION_LIST

    2 FUNCTION_LIST: FUNCTION_LIST FUNCTION_DECLARATION
    3              | ε

    4 FUNCTION_DECLARATION: TYPE IDENTIFIER '(' PARAMETER_LIST ')' BLOCK

    5 PARAMETER_LIST: PARAMETER_LIST ',' PARAMETER
    6               | PARAMETER
    7               | ε

    8 PARAMETER: PARAMETER_TYPE IDENTIFIER

    9 PARAMETER_TYPE: TYPE
   10               | ARRAY_TYPE

   11 TYPE: PRIMITIVE_TYPES

   12 ARRAY_TYPE: PRIMITIVE_TYPES '[' ']'

   13 VARIABLE_TYPE: PRIMITIVE_TYPES
   14              | PRIMITIVE_TYPES '[' EXPRESSION ']'

   15 BLOCK: '{' STATEMENT_LIST '}'

   16 STATEMENT_LIST: STATEMENT_LIST STATEMENT
   17               | ε

   18 STATEMENT: DECLARATION ';'
   19          | ASSIGNMENT ';'
   20          | PRINT ';'
   21          | IF_STATEMENT
   22          | WHILE_STATEMENT
   23          | RETURN_STATEMENT
   24          | FUNCTION_CALL_STATEMENT ';'
   25          | BLOCK

   26 DECLARATION: VARIABLE_TYPE IDENTIFIER
   27            | VARIABLE_TYPE IDENTIFIER '=' EXPRESSION

   28 ASSIGNMENT: IDENTIFIER '=' EXPRESSION
   29           | IDENTIFIER '[' EXPRESSION ']' '=' EXPRESSION

   30 PRINT: PRINTF '(' STRING_LITERAL ')'
   31      | PRINTF '(' STRING_LITERAL ',' EXPRESSION_LIST ')'

   32 EXPRESSION_LIST: EXPRESSION
   33                | EXPRESSION_LIST ',' EXPRESSION

   34 RETURN_STATEMENT: RETURN ';'
   35                 | RETURN EXPRESSION ';'

   36 FUNCTION_CALL_STATEMENT: FUNCTION_CALL

   37 FUNCTION_CALL: IDENTIFIER '(' ARGUMENT_LIST ')'

   38 ARGUMENT_LIST: ARGUMENT_LIST ',' EXPRESSION
   39              | EXPRESSION
   40              | ε

   41 IF_STATEMENT: IF '(' EXPRESSION ')' BLOCK
   42             | IF '(' EXPRESSION ')' BLOCK ELSE_CLAUSE

   43 ELSE_CLAUSE: ELSE BLOCK
   44            | ELSE IF_STATEMENT

   45 WHILE_STATEMENT: WHILE '(' EXPRESSION ')' BLOCK

   46 PRIMITIVE_TYPES: INT
   47                | FLOAT

   48 EXPRESSION: LOGICAL_OR

   49 LOGICAL_OR: LOGICAL_OR OR_OP LOGICAL_AND
   50           | LOGICAL_AND

   51 LOGICAL_AND: LOGICAL_AND AND_OP EQUALITY
   52            | EQUALITY

   53 EQUALITY: EQUALITY EQUAL_EQUAL RELATIONAL
   54         | EQUALITY NOT_EQUAL RELATIONAL
   55         | RELATIONAL

   56 RELATIONAL: RELATIONAL GREATER ADDITIVE
   57           | RELATIONAL LESS ADDITIVE
   58           | RELATIONAL GREATER_EQUAL ADDITIVE
   59           | RELATIONAL LESS_EQUAL ADDITIVE
   60           | ADDITIVE

   61 ADDITIVE: ADDITIVE '+' MULTIPLICATIVE
   62         | ADDITIVE '-' MULTIPLICATIVE
   63         | MULTIPLICATIVE

   64 MULTIPLICATIVE: MULTIPLICATIVE '*' UNARY
   65               | MULTIPLICATIVE '/' UNARY
   66               | MULTIPLICATIVE '%' UNARY
   67               | UNARY

   68 UNARY: '+' UNARY
   69      | '-' UNARY
   70      | NOT_OP UNARY
   71      | PRIMARY

   72 PRIMARY: IDENTIFIER
   73        | IDENTIFIER '[' EXPRESSION ']'
   74        | NUMBER
   75        | '(' EXPRESSION ')'
   76        | FUNCTION_CALL
   77        | PRIMITIVE_TYPES '(' EXPRESSION ')'

   78 NUMBER: INT_LITERAL
   79       | FLOAT_LITERAL


Terminals, with rules where they appear

    $end (0) 0
    '%' (37) 66
    '(' (40) 4 30 31 37 41 42 45 75 77
    ')' (41) 4 30 31 37 41 42 45 75 77
    '*' (42) 64
    '+' (43) 61 68
    ',' (44) 5 31 33 38
    '-' (45) 62 69
    '/' (47) 65
    ';' (59) 18 19 20 24 34 35
    '<' (60)
    '=' (61) 27 28 29
    '>' (62)
    '[' (91) 12 14 29 73
    ']' (93) 12 14 29 73
    '{' (123) 15
    '}' (125) 15
    error (256)
    IDENTIFIER <str> (258) 4 8 26 27 28 29 37 72 73
    INT (259) 46
    FLOAT (260) 47
    PRINTF (261) 30 31
    IF (262) 41 42
    ELSE (263) 43 44
    WHILE (264) 45
    RETURN (265) 34 35
    EQUAL_EQUAL (266) 53
    NOT_EQUAL (267) 54
    GREATER_EQUAL (268) 58
    LESS_EQUAL (269) 59
    GREATER (270) 56
    LESS (271) 57
    AND_OP (272) 51
    OR_OP (273) 49
    NOT_OP (274) 70
    INT_LITERAL <str> (275) 78
    FLOAT_LITERAL <str> (276) 79
    STRING_LITERAL <str> (277) 30 31
    UMINUS (278)


Nonterminals, with rules where they appear

    $accept (40)
        on left: 0
    PROGRAM <ast> (41)
        on left: 1
        on right: 0
    FUNCTION_LIST <ast> (42)
        on left: 2 3
        on right: 1 2
    FUNCTION_DECLARATION <ast> (43)
        on left: 4
        on right: 2
    PARAMETER_LIST <ast> (44)
        on left: 5 6 7
        on right: 4 5
    PARAMETER <ast> (45)
        on left: 8
        on right: 5 6
    PARAMETER_TYPE <ast> (46)
        on left: 9 10
        on right: 8
    TYPE <ast> (47)
        on left: 11
        on right: 4 9
    ARRAY_TYPE <ast> (48)
        on left: 12
        on right: 10
    VARIABLE_TYPE <ast> (49)
        on left: 13 14
        on right: 26 27
    BLOCK <ast> (50)
        on left: 15
        on right: 4 25 41 42 43 45
    STATEMENT_LIST <ast> (51)
        on left: 16 17
        on right: 15 16
    STATEMENT <ast> (52)
        on left: 18 19 20 21 22 23 24 25
        on right: 16
    DECLARATION <ast> (53)
        on left: 26 27
        on right: 18
    ASSIGNMENT <ast> (54)
        on left: 28 29
        on right: 19
    PRINT <ast> (55)
        on left: 30 31
        on right: 20
    EXPRESSION_LIST <ast> (56)
        on left: 32 33
        on right: 31 33
    RETURN_STATEMENT <ast> (57)
        on left: 34 35
        on right: 23
    FUNCTION_CALL_STATEMENT <ast> (58)
        on left: 36
        on right: 24
    FUNCTION_CALL <ast> (59)
        on left: 37
        on right: 36 76
    ARGUMENT_LIST <ast> (60)
        on left: 38 39 40
        on right: 37 38
    IF_STATEMENT <ast> (61)
        on left: 41 42
        on right: 21 44
    ELSE_CLAUSE <ast> (62)
        on left: 43 44
        on right: 42
    WHILE_STATEMENT <ast> (63)
        on left: 45
        on right: 22
    PRIMITIVE_TYPES <str> (64)
        on left: 46 47
        on right: 11 12 13 14 77
    EXPRESSION <ast> (65)
        on left: 48
        on right: 14 27 28 29 32 33 35 38 39 41 42 45 73 75 77
    LOGICAL_OR <ast> (66)
        on left: 49 50
        on right: 48 49
    LOGICAL_AND <ast> (67)
        on left: 51 52
        on right: 49 50 51
    EQUALITY <ast> (68)
        on left: 53 54 55
        on right: 51 52 53 54
    RELATIONAL <ast> (69)
        on left: 56 57 58 59 60
        on right: 53 54 55 56 57 58 59
    ADDITIVE <ast> (70)
        on left: 61 62 63
        on right: 56 57 58 59 60 61 62
    MULTIPLICATIVE <ast> (71)
        on left: 64 65 66 67
        on right: 61 62 63 64 65 66
    UNARY <ast> (72)
        on left: 68 69 70 71
        on right: 64 65 66 67 68 69 70
    PRIMARY <ast> (73)
        on left: 72 73 74 75 76 77
        on right: 71
    NUMBER <ast> (74)
        on left: 78 79
        on right: 74


State 0

    0 $accept: • PROGRAM $end

    $default  reduce using rule 3 (FUNCTION_LIST)

    PROGRAM        go to state 1
    FUNCTION_LIST  go to state 2


State 1

    0 $accept: PROGRAM • $end

    $end  shift, and go to state 3


State 2

    1 PROGRAM: FUNCTION_LIST •
    2 FUNCTION_LIST: FUNCTION_LIST • FUNCTION_DECLARATION

    INT    shift, and go to state 4
    FLOAT  shift, and go to state 5

    $default  reduce using rule 1 (PROGRAM)

    FUNCTION_DECLARATION  go to state 6
    TYPE                  go to state 7
    PRIMITIVE_TYPES       go to state 8


State 3

    0 $accept: PROGRAM $end •

    $default  accept


State 4

   46 PRIMITIVE_TYPES: INT •

    $default  reduce using rule 46 (PRIMITIVE_TYPES)


State 5

   47 PRIMITIVE_TYPES: FLOAT •

    $default  reduce using rule 47 (PRIMITIVE_TYPES)


State 6

    2 FUNCTION_LIST: FUNCTION_LIST FUNCTION_DECLARATION •

    $default  reduce using rule 2 (FUNCTION_LIST)


State 7

    4 FUNCTION_DECLARATION: TYPE • IDENTIFIER '(' PARAMETER_LIST ')' BLOCK

    IDENTIFIER  shift, and go to state 9


State 8

   11 TYPE: PRIMITIVE_TYPES •

    $default  reduce using rule 11 (TYPE)


State 9

    4 FUNCTION_DECLARATION: TYPE IDENTIFIER • '(' PARAMETER_LIST ')' BLOCK

    '('  shift, and go to state 10


State 10

    4 FUNCTION_DECLARATION: TYPE IDENTIFIER '(' • PARAMETER_LIST ')' BLOCK

    INT    shift, and go to state 4
    FLOAT  shift, and go to state 5

    $default  reduce using rule 7 (PARAMETER_LIST)

    PARAMETER_LIST   go to state 11
    PARAMETER        go to state 12
    PARAMETER_TYPE   go to state 13
    TYPE             go to state 14
    ARRAY_TYPE       go to state 15
    PRIMITIVE_TYPES  go to state 16


State 11

    4 FUNCTION_DECLARATION: TYPE IDENTIFIER '(' PARAMETER_LIST • ')' BLOCK
    5 PARAMETER_LIST: PARAMETER_LIST • ',' PARAMETER

    ')'  shift, and go to state 17
    ','  shift, and go to state 18


State 12

    6 PARAMETER_LIST: PARAMETER •

    $default  reduce using rule 6 (PARAMETER_LIST)


State 13

    8 PARAMETER: PARAMETER_TYPE • IDENTIFIER

    IDENTIFIER  shift, and go to state 19


State 14

    9 PARAMETER_TYPE: TYPE •

    $default  reduce using rule 9 (PARAMETER_TYPE)


State 15

   10 PARAMETER_TYPE: ARRAY_TYPE •

    $default  reduce using rule 10 (PARAMETER_TYPE)


State 16

   11 TYPE: PRIMITIVE_TYPES •
   12 ARRAY_TYPE: PRIMITIVE_TYPES • '[' ']'

    '['  shift, and go to state 20

    $default  reduce using rule 11 (TYPE)


State 17

    4 FUNCTION_DECLARATION: TYPE IDENTIFIER '(' PARAMETER_LIST ')' • BLOCK

    '{'  shift, and go to state 21

    BLOCK  go to state 22


State 18

    5 PARAMETER_LIST: PARAMETER_LIST ',' • PARAMETER

    INT    shift, and go to state 4
    FLOAT  shift, and go to state 5

    PARAMETER        go to state 23
    PARAMETER_TYPE   go to state 13
    TYPE             go to state 14
    ARRAY_TYPE       go to state 15
    PRIMITIVE_TYPES  go to state 16


State 19

    8 PARAMETER: PARAMETER_TYPE IDENTIFIER •

    $default  reduce using rule 8 (PARAMETER)


State 20

   12 ARRAY_TYPE: PRIMITIVE_TYPES '[' • ']'

    ']'  shift, and go to state 24


State 21

   15 BLOCK: '{' • STATEMENT_LIST '}'

    $default  reduce using rule 17 (STATEMENT_LIST)

    STATEMENT_LIST  go to state 25


State 22

    4 FUNCTION_DECLARATION: TYPE IDENTIFIER '(' PARAMETER_LIST ')' BLOCK •

    $default  reduce using rule 4 (FUNCTION_DECLARATION)


State 23

    5 PARAMETER_LIST: PARAMETER_LIST ',' PARAMETER •

    $default  reduce using rule 5 (PARAMETER_LIST)


State 24

   12 ARRAY_TYPE: PRIMITIVE_TYPES '[' ']' •

    $default  reduce using rule 12 (ARRAY_TYPE)


State 25

   15 BLOCK: '{' STATEMENT_LIST • '}'
   16 STATEMENT_LIST: STATEMENT_LIST • STATEMENT

    IDENTIFIER  shift, and go to state 26
    INT         shift, and go to state 4
    FLOAT       shift, and go to state 5
    PRINTF      shift, and go to state 27
    IF          shift, and go to state 28
    WHILE       shift, and go to state 29
    RETURN      shift, and go to state 30
    '{'         shift, and go to state 21
    '}'         shift, and go to state 31

    VARIABLE_TYPE            go to state 32
    BLOCK                    go to state 33
    STATEMENT                go to state 34
    DECLARATION              go to state 35
    ASSIGNMENT               go to state 36
    PRINT                    go to state 37
    RETURN_STATEMENT         go to state 38
    FUNCTION_CALL_STATEMENT  go to state 39
    FUNCTION_CALL            go to state 40
    IF_STATEMENT             go to state 41
    WHILE_STATEMENT          go to state 42
    PRIMITIVE_TYPES          go to state 43


State 26

   28 ASSIGNMENT: IDENTIFIER • '=' EXPRESSION
   29           | IDENTIFIER • '[' EXPRESSION ']' '=' EXPRESSION
   37 FUNCTION_CALL: IDENTIFIER • '(' ARGUMENT_LIST ')'

    '('  shift, and go to state 44
    '['  shift, and go to state 45
    '='  shift, and go to state 46


State 27

   30 PRINT: PRINTF • '(' STRING_LITERAL ')'
   31      | PRINTF • '(' STRING_LITERAL ',' EXPRESSION_LIST ')'

    '('  shift, and go to state 47


State 28

   41 IF_STATEMENT: IF • '(' EXPRESSION ')' BLOCK
   42             | IF • '(' EXPRESSION ')' BLOCK ELSE_CLAUSE

    '('  shift, and go to state 48


State 29

   45 WHILE_STATEMENT: WHILE • '(' EXPRESSION ')' BLOCK

    '('  shift, and go to state 49


State 30

   34 RETURN_STATEMENT: RETURN • ';'
   35                 | RETURN • EXPRESSION ';'

    IDENTIFIER     shift, and go to state 50
    INT            shift, and go to state 4
    FLOAT          shift, and go to state 5
    NOT_OP         shift, and go to state 51
    INT_LITERAL    shift, and go to state 52
    FLOAT_LITERAL  shift, and go to state 53
    '+'            shift, and go to state 54
    '-'            shift, and go to state 55
    '('            shift, and go to state 56
    ';'            shift, and go to state 57

    FUNCTION_CALL    go to state 58
    PRIMITIVE_TYPES  go to state 59
    EXPRESSION       go to state 60
    LOGICAL_OR       go to state 61
    LOGICAL_AND      go to state 62
    EQUALITY         go to state 63
    RELATIONAL       go to state 64
    ADDITIVE         go to state 65
    MULTIPLICATIVE   go to state 66
    UNARY            go to state 67
    PRIMARY          go to state 68
    NUMBER           go to state 69


State 31

   15 BLOCK: '{' STATEMENT_LIST '}' •

    $default  reduce using rule 15 (BLOCK)


State 32

   26 DECLARATION: VARIABLE_TYPE • IDENTIFIER
   27            | VARIABLE_TYPE • IDENTIFIER '=' EXPRESSION

    IDENTIFIER  shift, and go to state 70


State 33

   25 STATEMENT: BLOCK •

    $default  reduce using rule 25 (STATEMENT)


State 34

   16 STATEMENT_LIST: STATEMENT_LIST STATEMENT •

    $default  reduce using rule 16 (STATEMENT_LIST)


State 35

   18 STATEMENT: DECLARATION • ';'

    ';'  shift, and go to state 71


State 36

   19 STATEMENT: ASSIGNMENT • ';'

    ';'  shift, and go to state 72


State 37

   20 STATEMENT: PRINT • ';'

    ';'  shift, and go to state 73


State 38

   23 STATEMENT: RETURN_STATEMENT •

    $default  reduce using rule 23 (STATEMENT)


State 39

   24 STATEMENT: FUNCTION_CALL_STATEMENT • ';'

    ';'  shift, and go to state 74


State 40

   36 FUNCTION_CALL_STATEMENT: FUNCTION_CALL •

    $default  reduce using rule 36 (FUNCTION_CALL_STATEMENT)


State 41

   21 STATEMENT: IF_STATEMENT •

    $default  reduce using rule 21 (STATEMENT)


State 42

   22 STATEMENT: WHILE_STATEMENT •

    $default  reduce using rule 22 (STATEMENT)


State 43

   13 VARIABLE_TYPE: PRIMITIVE_TYPES •
   14              | PRIMITIVE_TYPES • '[' EXPRESSION ']'

    '['  shift, and go to state 75

    $default  reduce using rule 13 (VARIABLE_TYPE)


State 44

   37 FUNCTION_CALL: IDENTIFIER '(' • ARGUMENT_LIST ')'

    IDENTIFIER     shift, and go to state 50
    INT            shift, and go to state 4
    FLOAT          shift, and go to state 5
    NOT_OP         shift, and go to state 51
    INT_LITERAL    shift, and go to state 52
    FLOAT_LITERAL  shift, and go to state 53
    '+'            shift, and go to state 54
    '-'            shift, and go to state 55
    '('            shift, and go to state 56

    $default  reduce using rule 40 (ARGUMENT_LIST)

    FUNCTION_CALL    go to state 58
    ARGUMENT_LIST    go to state 76
    PRIMITIVE_TYPES  go to state 59
    EXPRESSION       go to state 77
    LOGICAL_OR       go to state 61
    LOGICAL_AND      go to state 62
    EQUALITY         go to state 63
    RELATIONAL       go to state 64
    ADDITIVE         go to state 65
    MULTIPLICATIVE   go to state 66
    UNARY            go to state 67
    PRIMARY          go to state 68
    NUMBER           go to state 69


State 45

   29 ASSIGNMENT: IDENTIFIER '[' • EXPRESSION ']' '=' EXPRESSION

    IDENTIFIER     shift, and go to state 50
    INT            shift, and go to state 4
    FLOAT          shift, and go to state 5
    NOT_OP         shift, and go to state 51
    INT_LITERAL    shift, and go to state 52
    FLOAT_LITERAL  shift, and go to state 53
    '+'            shift, and go to state 54
    '-'            shift, and go to state 55
    '('            shift, and go to state 56

    FUNCTION_CALL    go to state 58
    PRIMITIVE_TYPES  go to state 59
    EXPRESSION       go to state 78
    LOGICAL_OR       go to state 61
    LOGICAL_AND      go to state 62
    EQUALITY         go to state 63
    RELATIONAL       go to state 64
    ADDITIVE         go to state 65
    MULTIPLICATIVE   go to state 66
    UNARY            go to state 67
    PRIMARY          go to state 68
    NUMBER           go to state 69


State 46

   28 ASSIGNMENT: IDENTIFIER '=' • EXPRESSION

    IDENTIFIER     shift, and go to state 50
    INT            shift, and go to state 4
    FLOAT          shift, and go to state 5
    NOT_OP         shift, and go to state 51
    INT_LITERAL    shift, and go to state 52
    FLOAT_LITERAL  shift, and go to state 53
    '+'            shift, and go to state 54
    '-'            shift, and go to state 55
    '('            shift, and go to state 56

    FUNCTION_CALL    go to state 58
    PRIMITIVE_TYPES  go to state 59
    EXPRESSION       go to state 79
    LOGICAL_OR       go to state 61
    LOGICAL_AND      go to state 62
    EQUALITY         go to state 63
    RELATIONAL       go to state 64
    ADDITIVE         go to state 65
    MULTIPLICATIVE   go to state 66
    UNARY            go to state 67
    PRIMARY          go to state 68
    NUMBER           go to state 69


State 47

   30 PRINT: PRINTF '(' • STRING_LITERAL ')'
   31      | PRINTF '(' • STRING_LITERAL ',' EXPRESSION_LIST ')'

    STRING_LITERAL  shift, and go to state 80


State 48

   41 IF_STATEMENT: IF '(' • EXPRESSION ')' BLOCK
   42             | IF '(' • EXPRESSION ')' BLOCK ELSE_CLAUSE

    IDENTIFIER     shift, and go to state 50
    INT            shift, and go to state 4
    FLOAT          shift, and go to state 5
    NOT_OP         shift, and go to state 51
    INT_LITERAL    shift, and go to state 52
    FLOAT_LITERAL  shift, and go to state 53
    '+'            shift, and go to state 54
    '-'            shift, and go to state 55
    '('            shift, and go to state 56

    FUNCTION_CALL    go to state 58
    PRIMITIVE_TYPES  go to state 59
    EXPRESSION       go to state 81
    LOGICAL_OR       go to state 61
    LOGICAL_AND      go to state 62
    EQUALITY         go to state 63
    RELATIONAL       go to state 64
    ADDITIVE         go to state 65
    MULTIPLICATIVE   go to state 66
    UNARY            go to state 67
    PRIMARY          go to state 68
    NUMBER           go to state 69


State 49

   45 WHILE_STATEMENT: WHILE '(' • EXPRESSION ')' BLOCK

    IDENTIFIER     shift, and go to state 50
    INT            shift, and go to state 4
    FLOAT          shift, and go to state 5
    NOT_OP         shift, and go to state 51
    INT_LITERAL    shift, and go to state 52
    FLOAT_LITERAL  shift, and go to state 53
    '+'            shift, and go to state 54
    '-'            shift, and go to state 55
    '('            shift, and go to state 56

    FUNCTION_CALL    go to state 58
    PRIMITIVE_TYPES  go to state 59
    EXPRESSION       go to state 82
    LOGICAL_OR       go to state 61
    LOGICAL_AND      go to state 62
    EQUALITY         go to state 63
    RELATIONAL       go to state 64
    ADDITIVE         go to state 65
    MULTIPLICATIVE   go to state 66
    UNARY            go to state 67
    PRIMARY          go to state 68
    NUMBER           go to state 69


State 50

   37 FUNCTION_CALL: IDENTIFIER • '(' ARGUMENT_LIST ')'
   72 PRIMARY: IDENTIFIER •
   73        | IDENTIFIER • '[' EXPRESSION ']'

    '('  shift, and go to state 44
    '['  shift, and go to state 83

    $default  reduce using rule 72 (PRIMARY)


State 51

   70 UNARY: NOT_OP • UNARY

    IDENTIFIER     shift, and go to state 50
    INT            shift, and go to state 4
    FLOAT          shift, and go to state 5
    NOT_OP         shift, and go to state 51
    INT_LITERAL    shift, and go to state 52
    FLOAT_LITERAL  shift, and go to state 53
    '+'            shift, and go to state 54
    '-'            shift, and go to state 55
    '('            shift, and go to state 56

    FUNCTION_CALL    go to state 58
    PRIMITIVE_TYPES  go to state 59
    UNARY            go to state 84
    PRIMARY          go to state 68
    NUMBER           go to state 69


State 52

   78 NUMBER: INT_LITERAL •

    $default  reduce using rule 78 (NUMBER)


State 53

   79 NUMBER: FLOAT_LITERAL •

    $default  reduce using rule 79 (NUMBER)


State 54

   68 UNARY: '+' • UNARY

    IDENTIFIER     shift, and go to state 50
    INT            shift, and go to state 4
    FLOAT          shift, and go to state 5
    NOT_OP         shift, and go to state 51
    INT_LITERAL    shift, and go to state 52
    FLOAT_LITERAL  shift, and go to state 53
    '+'            shift, and go to state 54
    '-'            shift, and go to state 55
    '('            shift, and go to state 56

    FUNCTION_CALL    go to state 58
    PRIMITIVE_TYPES  go to state 59
    UNARY            go to state 85
    PRIMARY          go to state 68
    NUMBER           go to state 69


State 55

   69 UNARY: '-' • UNARY

    IDENTIFIER     shift, and go to state 50
    INT            shift, and go to state 4
    FLOAT          shift, and go to state 5
    NOT_OP         shift, and go to state 51
    INT_LITERAL    shift, and go to state 52
    FLOAT_LITERAL  shift, and go to state 53
    '+'            shift, and go to state 54
    '-'            shift, and go to state 55
    '('            shift, and go to state 56

    FUNCTION_CALL    go to state 58
    PRIMITIVE_TYPES  go to state 59
    UNARY            go to state 86
    PRIMARY          go to state 68
    NUMBER           go to state 69


State 56

   75 PRIMARY: '(' • EXPRESSION ')'

    IDENTIFIER     shift, and go to state 50
    INT            shift, and go to state 4
    FLOAT          shift, and go to state 5
    NOT_OP         shift, and go to state 51
    INT_LITERAL    shift, and go to state 52
    FLOAT_LITERAL  shift, and go to state 53
    '+'            shift, and go to state 54
    '-'            shift, and go to state 55
    '('            shift, and go to state 56

    FUNCTION_CALL    go to state 58
    PRIMITIVE_TYPES  go to state 59
    EXPRESSION       go to state 87
    LOGICAL_OR       go to state 61
    LOGICAL_AND      go to state 62
    EQUALITY         go to state 63
    RELATIONAL       go to state 64
    ADDITIVE         go to state 65
    MULTIPLICATIVE   go to state 66
    UNARY            go to state 67
    PRIMARY          go to state 68
    NUMBER           go to state 69


State 57

   34 RETURN_STATEMENT: RETURN ';' •

    $default  reduce using rule 34 (RETURN_STATEMENT)


State 58

   76 PRIMARY: FUNCTION_CALL •

    $default  reduce using rule 76 (PRIMARY)


State 59

   77 PRIMARY: PRIMITIVE_TYPES • '(' EXPRESSION ')'

    '('  shift, and go to state 88


State 60

   35 RETURN_STATEMENT: RETURN EXPRESSION • ';'

    ';'  shift, and go to state 89


State 61

   48 EXPRESSION: LOGICAL_OR •
   49 LOGICAL_OR: LOGICAL_OR • OR_OP LOGICAL_AND

    OR_OP  shift, and go to state 90

    $default  reduce using rule 48 (EXPRESSION)


State 62

   50 LOGICAL_OR: LOGICAL_AND •
   51 LOGICAL_AND: LOGICAL_AND • AND_OP EQUALITY

    AND_OP  shift, and go to state 91

    $default  reduce using rule 50 (LOGICAL_OR)


State 63

   52 LOGICAL_AND: EQUALITY •
   53 EQUALITY: EQUALITY • EQUAL_EQUAL RELATIONAL
   54         | EQUALITY • NOT_EQUAL RELATIONAL

    EQUAL_EQUAL  shift, and go to state 92
    NOT_EQUAL    shift, and go to state 93

    $default  reduce using rule 52 (LOGICAL_AND)


State 64

   55 EQUALITY: RELATIONAL •
   56 RELATIONAL: RELATIONAL • GREATER ADDITIVE
   57           | RELATIONAL • LESS ADDITIVE
   58           | RELATIONAL • GREATER_EQUAL ADDITIVE
   59           | RELATIONAL • LESS_EQUAL ADDITIVE

    GREATER_EQUAL  shift, and go to state 94
    LESS_EQUAL     shift, and go to state 95
    GREATER        shift, and go to state 96
    LESS           shift, and go to state 97

    $default  reduce using rule 55 (EQUALITY)


State 65

   60 RELATIONAL: ADDITIVE •
   61 ADDITIVE: ADDITIVE • '+' MULTIPLICATIVE
   62         | ADDITIVE • '-' MULTIPLICATIVE

    '+'  shift, and go to state 98
    '-'  shift, and go to state 99

    $default  reduce using rule 60 (RELATIONAL)


State 66

   63 ADDITIVE: MULTIPLICATIVE •
   64 MULTIPLICATIVE: MULTIPLICATIVE • '*' UNARY
   65               | MULTIPLICATIVE • '/' UNARY
   66               | MULTIPLICATIVE • '%' UNARY

    '*'  shift, and go to state 100
    '/'  shift, and go to state 101
    '%'  shift, and go to state 102

    $default  reduce using rule 63 (ADDITIVE)


State 67

   67 MULTIPLICATIVE: UNARY •

    $default  reduce using rule 67 (MULTIPLICATIVE)


State 68

   71 UNARY: PRIMARY •

    $default  reduce using rule 71 (UNARY)


State 69

   74 PRIMARY: NUMBER •

    $default  reduce using rule 74 (PRIMARY)


State 70

   26 DECLARATION: VARIABLE_TYPE IDENTIFIER •
   27            | VARIABLE_TYPE IDENTIFIER • '=' EXPRESSION

    '='  shift, and go to state 103

    $default  reduce using rule 26 (DECLARATION)


State 71

   18 STATEMENT: DECLARATION ';' •

    $default  reduce using rule 18 (STATEMENT)


State 72

   19 STATEMENT: ASSIGNMENT ';' •

    $default  reduce using rule 19 (STATEMENT)


State 73

   20 STATEMENT: PRINT ';' •

    $default  reduce using rule 20 (STATEMENT)


State 74

   24 STATEMENT: FUNCTION_CALL_STATEMENT ';' •

    $default  reduce using rule 24 (STATEMENT)


State 75

   14 VARIABLE_TYPE: PRIMITIVE_TYPES '[' • EXPRESSION ']'

    IDENTIFIER     shift, and go to state 50
    INT            shift, and go to state 4
    FLOAT          shift, and go to state 5
    NOT_OP         shift, and go to state 51
    INT_LITERAL    shift, and go to state 52
    FLOAT_LITERAL  shift, and go to state 53
    '+'            shift, and go to state 54
    '-'            shift, and go to state 55
    '('            shift, and go to state 56

    FUNCTION_CALL    go to state 58
    PRIMITIVE_TYPES  go to state 59
    EXPRESSION       go to state 104
    LOGICAL_OR       go to state 61
    LOGICAL_AND      go to state 62
    EQUALITY         go to state 63
    RELATIONAL       go to state 64
    ADDITIVE         go to state 65
    MULTIPLICATIVE   go to state 66
    UNARY            go to state 67
    PRIMARY          go to state 68
    NUMBER           go to state 69


State 76

   37 FUNCTION_CALL: IDENTIFIER '(' ARGUMENT_LIST • ')'
   38 ARGUMENT_LIST: ARGUMENT_LIST • ',' EXPRESSION

    ')'  shift, and go to state 105
    ','  shift, and go to state 106


State 77

   39 ARGUMENT_LIST: EXPRESSION •

    $default  reduce using rule 39 (ARGUMENT_LIST)


State 78

   29 ASSIGNMENT: IDENTIFIER '[' EXPRESSION • ']' '=' EXPRESSION

    ']'  shift, and go to state 107


State 79

   28 ASSIGNMENT: IDENTIFIER '=' EXPRESSION •

    $default  reduce using rule 28 (ASSIGNMENT)


State 80

   30 PRINT: PRINTF '(' STRING_LITERAL • ')'
   31      | PRINTF '(' STRING_LITERAL • ',' EXPRESSION_LIST ')'

    ')'  shift, and go to state 108
    ','  shift, and go to state 109


State 81

   41 IF_STATEMENT: IF '(' EXPRESSION • ')' BLOCK
   42             | IF '(' EXPRESSION • ')' BLOCK ELSE_CLAUSE

    ')'  shift, and go to state 110


State 82

   45 WHILE_STATEMENT: WHILE '(' EXPRESSION • ')' BLOCK

    ')'  shift, and go to state 111


State 83

   73 PRIMARY: IDENTIFIER '[' • EXPRESSION ']'

    IDENTIFIER     shift, and go to state 50
    INT            shift, and go to state 4
    FLOAT          shift, and go to state 5
    NOT_OP         shift, and go to state 51
    INT_LITERAL    shift, and go to state 52
    FLOAT_LITERAL  shift, and go to state 53
    '+'            shift, and go to state 54
    '-'            shift, and go to state 55
    '('            shift, and go to state 56

    FUNCTION_CALL    go to state 58
    PRIMITIVE_TYPES  go to state 59
    EXPRESSION       go to state 112
    LOGICAL_OR       go to state 61
    LOGICAL_AND      go to state 62
    EQUALITY         go to state 63
    RELATIONAL       go to state 64
    ADDITIVE         go to state 65
    MULTIPLICATIVE   go to state 66
    UNARY            go to state 67
    PRIMARY          go to state 68
    NUMBER           go to state 69


State 84

   70 UNARY: NOT_OP UNARY •

    $default  reduce using rule 70 (UNARY)


State 85

   68 UNARY: '+' UNARY •

    $default  reduce using rule 68 (UNARY)


State 86

   69 UNARY: '-' UNARY •

    $default  reduce using rule 69 (UNARY)


State 87

   75 PRIMARY: '(' EXPRESSION • ')'

    ')'  shift, and go to state 113


State 88

   77 PRIMARY: PRIMITIVE_TYPES '(' • EXPRESSION ')'

    IDENTIFIER     shift, and go to state 50
    INT            shift, and go to state 4
    FLOAT          shift, and go to state 5
    NOT_OP         shift, and go to state 51
    INT_LITERAL    shift, and go to state 52
    FLOAT_LITERAL  shift, and go to state 53
    '+'            shift, and go to state 54
    '-'            shift, and go to state 55
    '('            shift, and go to state 56

    FUNCTION_CALL    go to state 58
    PRIMITIVE_TYPES  go to state 59
    EXPRESSION       go to state 114
    LOGICAL_OR       go to state 61
    LOGICAL_AND      go to state 62
    EQUALITY         go to state 63
    RELATIONAL       go to state 64
    ADDITIVE         go to state 65
    MULTIPLICATIVE   go to state 66
    UNARY            go to state 67
    PRIMARY          go to state 68
    NUMBER           go to state 69


State 89

   35 RETURN_STATEMENT: RETURN EXPRESSION ';' •

    $default  reduce using rule 35 (RETURN_STATEMENT)


State 90

   49 LOGICAL_OR: LOGICAL_OR OR_OP • LOGICAL_AND

    IDENTIFIER     shift, and go to state 50
    INT            shift, and go to state 4
    FLOAT          shift, and go to state 5
    NOT_OP         shift, and go to state 51
    INT_LITERAL    shift, and go to state 52
    FLOAT_LITERAL  shift, and go to state 53
    '+'            shift, and go to state 54
    '-'            shift, and go to state 55
    '('            shift, and go to state 56

    FUNCTION_CALL    go to state 58
    PRIMITIVE_TYPES  go to state 59
    LOGICAL_AND      go to state 115
    EQUALITY         go to state 63
    RELATIONAL       go to state 64
    ADDITIVE         go to state 65
    MULTIPLICATIVE   go to state 66
    UNARY            go to state 67
    PRIMARY          go to state 68
    NUMBER           go to state 69


State 91

   51 LOGICAL_AND: LOGICAL_AND AND_OP • EQUALITY

    IDENTIFIER     shift, and go to state 50
    INT            shift, and go to state 4
    FLOAT          shift, and go to state 5
    NOT_OP         shift, and go to state 51
    INT_LITERAL    shift, and go to state 52
    FLOAT_LITERAL  shift, and go to state 53
    '+'            shift, and go to state 54
    '-'            shift, and go to state 55
    '('            shift, and go to state 56

    FUNCTION_CALL    go to state 58
    PRIMITIVE_TYPES  go to state 59
    EQUALITY         go to state 116
    RELATIONAL       go to state 64
    ADDITIVE         go to state 65
    MULTIPLICATIVE   go to state 66
    UNARY            go to state 67
    PRIMARY          go to state 68
    NUMBER           go to state 69


State 92

   53 EQUALITY: EQUALITY EQUAL_EQUAL • RELATIONAL

    IDENTIFIER     shift, and go to state 50
    INT            shift, and go to state 4
    FLOAT          shift, and go to state 5
    NOT_OP         shift, and go to state 51
    INT_LITERAL    shift, and go to state 52
    FLOAT_LITERAL  shift, and go to state 53
    '+'            shift, and go to state 54
    '-'            shift, and go to state 55
    '('            shift, and go to state 56

    FUNCTION_CALL    go to state 58
    PRIMITIVE_TYPES  go to state 59
    RELATIONAL       go to state 117
    ADDITIVE         go to state 65
    MULTIPLICATIVE   go to state 66
    UNARY            go to state 67
    PRIMARY          go to state 68
    NUMBER           go to state 69


State 93

   54 EQUALITY: EQUALITY NOT_EQUAL • RELATIONAL

    IDENTIFIER     shift, and go to state 50
    INT            shift, and go to state 4
    FLOAT          shift, and go to state 5
    NOT_OP         shift, and go to state 51
    INT_LITERAL    shift, and go to state 52
    FLOAT_LITERAL  shift, and go to state 53
    '+'            shift, and go to state 54
    '-'            shift, and go to state 55
    '('            shift, and go to state 56

    FUNCTION_CALL    go to state 58
    PRIMITIVE_TYPES  go to state 59
    RELATIONAL       go to state 118
    ADDITIVE         go to state 65
    MULTIPLICATIVE   go to state 66
    UNARY            go to state 67
    PRIMARY          go to state 68
    NUMBER           go to state 69


State 94

   58 RELATIONAL: RELATIONAL GREATER_EQUAL • ADDITIVE

    IDENTIFIER     shift, and go to state 50
    INT            shift, and go to state 4
    FLOAT          shift, and go to state 5
    NOT_OP         shift, and go to state 51
    INT_LITERAL    shift, and go to state 52
    FLOAT_LITERAL  shift, and go to state 53
    '+'            shift, and go to state 54
    '-'            shift, and go to state 55
    '('            shift, and go to state 56

    FUNCTION_CALL    go to state 58
    PRIMITIVE_TYPES  go to state 59
    ADDITIVE         go to state 119
    MULTIPLICATIVE   go to state 66
    UNARY            go to state 67
    PRIMARY          go to state 68
    NUMBER           go to state 69


State 95

   59 RELATIONAL: RELATIONAL LESS_EQUAL • ADDITIVE

    IDENTIFIER     shift, and go to state 50
    INT            shift, and go to state 4
    FLOAT          shift, and go to state 5
    NOT_OP         shift, and go to state 51
    INT_LITERAL    shift, and go to state 52
    FLOAT_LITERAL  shift, and go to state 53
    '+'            shift, and go to state 54
    '-'            shift, and go to state 55
    '('            shift, and go to state 56

    FUNCTION_CALL    go to state 58
    PRIMITIVE_TYPES  go to state 59
    ADDITIVE         go to state 120
    MULTIPLICATIVE   go to state 66
    UNARY            go to state 67
    PRIMARY          go to state 68
    NUMBER           go to state 69


State 96

   56 RELATIONAL: RELATIONAL GREATER • ADDITIVE

    IDENTIFIER     shift, and go to state 50
    INT            shift, and go to state 4
    FLOAT          shift, and go to state 5
    NOT_OP         shift, and go to state 51
    INT_LITERAL    shift, and go to state 52
    FLOAT_LITERAL  shift, and go to state 53
    '+'            shift, and go to state 54
    '-'            shift, and go to state 55
    '('            shift, and go to state 56

    FUNCTION_CALL    go to state 58
    PRIMITIVE_TYPES  go to state 59
    ADDITIVE         go to state 121
    MULTIPLICATIVE   go to state 66
    UNARY            go to state 67
    PRIMARY          go to state 68
    NUMBER           go to state 69


State 97

   57 RELATIONAL: RELATIONAL LESS • ADDITIVE

    IDENTIFIER     shift, and go to state 50
    INT            shift, and go to state 4
    FLOAT          shift, and go to state 5
    NOT_OP         shift, and go to state 51
    INT_LITERAL    shift, and go to state 52
    FLOAT_LITERAL  shift, and go to state 53
    '+'            shift, and go to state 54
    '-'            shift, and go to state 55
    '('            shift, and go to state 56

    FUNCTION_CALL    go to state 58
    PRIMITIVE_TYPES  go to state 59
    ADDITIVE         go to state 122
    MULTIPLICATIVE   go to state 66
    UNARY            go to state 67
    PRIMARY          go to state 68
    NUMBER           go to state 69


State 98

   61 ADDITIVE: ADDITIVE '+' • MULTIPLICATIVE

    IDENTIFIER     shift, and go to state 50
    INT            shift, and go to state 4
    FLOAT          shift, and go to state 5
    NOT_OP         shift, and go to state 51
    INT_LITERAL    shift, and go to state 52
    FLOAT_LITERAL  shift, and go to state 53
    '+'            shift, and go to state 54
    '-'            shift, and go to state 55
    '('            shift, and go to state 56

    FUNCTION_CALL    go to state 58
    PRIMITIVE_TYPES  go to state 59
    MULTIPLICATIVE   go to state 123
    UNARY            go to state 67
    PRIMARY          go to state 68
    NUMBER           go to state 69


State 99

   62 ADDITIVE: ADDITIVE '-' • MULTIPLICATIVE

    IDENTIFIER     shift, and go to state 50
    INT            shift, and go to state 4
    FLOAT          shift, and go to state 5
    NOT_OP         shift, and go to state 51
    INT_LITERAL    shift, and go to state 52
    FLOAT_LITERAL  shift, and go to state 53
    '+'            shift, and go to state 54
    '-'            shift, and go to state 55
    '('            shift, and go to state 56

    FUNCTION_CALL    go to state 58
    PRIMITIVE_TYPES  go to state 59
    MULTIPLICATIVE   go to state 124
    UNARY            go to state 67
    PRIMARY          go to state 68
    NUMBER           go to state 69


State 100

   64 MULTIPLICATIVE: MULTIPLICATIVE '*' • UNARY

    IDENTIFIER     shift, and go to state 50
    INT            shift, and go to state 4
    FLOAT          shift, and go to state 5
    NOT_OP         shift, and go to state 51
    INT_LITERAL    shift, and go to state 52
    FLOAT_LITERAL  shift, and go to state 53
    '+'            shift, and go to state 54
    '-'            shift, and go to state 55
    '('            shift, and go to state 56

    FUNCTION_CALL    go to state 58
    PRIMITIVE_TYPES  go to state 59
    UNARY            go to state 125
    PRIMARY          go to state 68
    NUMBER           go to state 69


State 101

   65 MULTIPLICATIVE: MULTIPLICATIVE '/' • UNARY

    IDENTIFIER     shift, and go to state 50
    INT            shift, and go to state 4
    FLOAT          shift, and go to state 5
    NOT_OP         shift, and go to state 51
    INT_LITERAL    shift, and go to state 52
    FLOAT_LITERAL  shift, and go to state 53
    '+'            shift, and go to state 54
    '-'            shift, and go to state 55
    '('            shift, and go to state 56

    FUNCTION_CALL    go to state 58
    PRIMITIVE_TYPES  go to state 59
    UNARY            go to state 126
    PRIMARY          go to state 68
    NUMBER           go to state 69


State 102

   66 MULTIPLICATIVE: MULTIPLICATIVE '%' • UNARY

    IDENTIFIER     shift, and go to state 50
    INT            shift, and go to state 4
    FLOAT          shift, and go to state 5
    NOT_OP         shift, and go to state 51
    INT_LITERAL    shift, and go to state 52
    FLOAT_LITERAL  shift, and go to state 53
    '+'            shift, and go to state 54
    '-'            shift, and go to state 55
    '('            shift, and go to state 56

    FUNCTION_CALL    go to state 58
    PRIMITIVE_TYPES  go to state 59
    UNARY            go to state 127
    PRIMARY          go to state 68
    NUMBER           go to state 69


State 103

   27 DECLARATION: VARIABLE_TYPE IDENTIFIER '=' • EXPRESSION

    IDENTIFIER     shift, and go to state 50
    INT            shift, and go to state 4
    FLOAT          shift, and go to state 5
    NOT_OP         shift, and go to state 51
    INT_LITERAL    shift, and go to state 52
    FLOAT_LITERAL  shift, and go to state 53
    '+'            shift, and go to state 54
    '-'            shift, and go to state 55
    '('            shift, and go to state 56

    FUNCTION_CALL    go to state 58
    PRIMITIVE_TYPES  go to state 59
    EXPRESSION       go to state 128
    LOGICAL_OR       go to state 61
    LOGICAL_AND      go to state 62
    EQUALITY         go to state 63
    RELATIONAL       go to state 64
    ADDITIVE         go to state 65
    MULTIPLICATIVE   go to state 66
    UNARY            go to state 67
    PRIMARY          go to state 68
    NUMBER           go to state 69


State 104

   14 VARIABLE_TYPE: PRIMITIVE_TYPES '[' EXPRESSION • ']'

    ']'  shift, and go to state 129


State 105

   37 FUNCTION_CALL: IDENTIFIER '(' ARGUMENT_LIST ')' •

    $default  reduce using rule 37 (FUNCTION_CALL)


State 106

   38 ARGUMENT_LIST: ARGUMENT_LIST ',' • EXPRESSION

    IDENTIFIER     shift, and go to state 50
    INT            shift, and go to state 4
    FLOAT          shift, and go to state 5
    NOT_OP         shift, and go to state 51
    INT_LITERAL    shift, and go to state 52
    FLOAT_LITERAL  shift, and go to state 53
    '+'            shift, and go to state 54
    '-'            shift, and go to state 55
    '('            shift, and go to state 56

    FUNCTION_CALL    go to state 58
    PRIMITIVE_TYPES  go to state 59
    EXPRESSION       go to state 130
    LOGICAL_OR       go to state 61
    LOGICAL_AND      go to state 62
    EQUALITY         go to state 63
    RELATIONAL       go to state 64
    ADDITIVE         go to state 65
    MULTIPLICATIVE   go to state 66
    UNARY            go to state 67
    PRIMARY          go to state 68
    NUMBER           go to state 69


State 107

   29 ASSIGNMENT: IDENTIFIER '[' EXPRESSION ']' • '=' EXPRESSION

    '='  shift, and go to state 131


State 108

   30 PRINT: PRINTF '(' STRING_LITERAL ')' •

    $default  reduce using rule 30 (PRINT)


State 109

   31 PRINT: PRINTF '(' STRING_LITERAL ',' • EXPRESSION_LIST ')'

    IDENTIFIER     shift, and go to state 50
    INT            shift, and go to state 4
    FLOAT          shift, and go to state 5
    NOT_OP         shift, and go to state 51
    INT_LITERAL    shift, and go to state 52
    FLOAT_LITERAL  shift, and go to state 53
    '+'            shift, and go to state 54
    '-'            shift, and go to state 55
    '('            shift, and go to state 56

    EXPRESSION_LIST  go to state 132
    FUNCTION_CALL    go to state 58
    PRIMITIVE_TYPES  go to state 59
    EXPRESSION       go to state 133
    LOGICAL_OR       go to state 61
    LOGICAL_AND      go to state 62
    EQUALITY         go to state 63
    RELATIONAL       go to state 64
    ADDITIVE         go to state 65
    MULTIPLICATIVE   go to state 66
    UNARY            go to state 67
    PRIMARY          go to state 68
    NUMBER           go to state 69


State 110

   41 IF_STATEMENT: IF '(' EXPRESSION ')' • BLOCK
   42             | IF '(' EXPRESSION ')' • BLOCK ELSE_CLAUSE

    '{'  shift, and go to state 21

    BLOCK  go to state 134


State 111

   45 WHILE_STATEMENT: WHILE '(' EXPRESSION ')' • BLOCK

    '{'  shift, and go to state 21

    BLOCK  go to state 135


State 112

   73 PRIMARY: IDENTIFIER '[' EXPRESSION • ']'

    ']'  shift, and go to state 136


State 113

   75 PRIMARY: '(' EXPRESSION ')' •

    $default  reduce using rule 75 (PRIMARY)


State 114

   77 PRIMARY: PRIMITIVE_TYPES '(' EXPRESSION • ')'

    ')'  shift, and go to state 137


State 115

   49 LOGICAL_OR: LOGICAL_OR OR_OP LOGICAL_AND •
   51 LOGICAL_AND: LOGICAL_AND • AND_OP EQUALITY

    AND_OP  shift, and go to state 91

    $default  reduce using rule 49 (LOGICAL_OR)


State 116

   51 LOGICAL_AND: LOGICAL_AND AND_OP EQUALITY •
   53 EQUALITY: EQUALITY • EQUAL_EQUAL RELATIONAL
   54         | EQUALITY • NOT_EQUAL RELATIONAL

    EQUAL_EQUAL  shift, and go to state 92
    NOT_EQUAL    shift, and go to state 93

    $default  reduce using rule 51 (LOGICAL_AND)


State 117

   53 EQUALITY: EQUALITY EQUAL_EQUAL RELATIONAL •
   56 RELATIONAL: RELATIONAL • GREATER ADDITIVE
   57           | RELATIONAL • LESS ADDITIVE
   58           | RELATIONAL • GREATER_EQUAL ADDITIVE
   59           | RELATIONAL • LESS_EQUAL ADDITIVE

    GREATER_EQUAL  shift, and go to state 94
    LESS_EQUAL     shift, and go to state 95
    GREATER        shift, and go to state 96
    LESS           shift, and go to state 97

    $default  reduce using rule 53 (EQUALITY)


State 118

   54 EQUALITY: EQUALITY NOT_EQUAL RELATIONAL •
   56 RELATIONAL: RELATIONAL • GREATER ADDITIVE
   57           | RELATIONAL • LESS ADDITIVE
   58           | RELATIONAL • GREATER_EQUAL ADDITIVE
   59           | RELATIONAL • LESS_EQUAL ADDITIVE

    GREATER_EQUAL  shift, and go to state 94
    LESS_EQUAL     shift, and go to state 95
    GREATER        shift, and go to state 96
    LESS           shift, and go to state 97

    $default  reduce using rule 54 (EQUALITY)


State 119

   58 RELATIONAL: RELATIONAL GREATER_EQUAL ADDITIVE •
   61 ADDITIVE: ADDITIVE • '+' MULTIPLICATIVE
   62         | ADDITIVE • '-' MULTIPLICATIVE

    '+'  shift, and go to state 98
    '-'  shift, and go to state 99

    $default  reduce using rule 58 (RELATIONAL)


State 120

   59 RELATIONAL: RELATIONAL LESS_EQUAL ADDITIVE •
   61 ADDITIVE: ADDITIVE • '+' MULTIPLICATIVE
   62         | ADDITIVE • '-' MULTIPLICATIVE

    '+'  shift, and go to state 98
    '-'  shift, and go to state 99

    $default  reduce using rule 59 (RELATIONAL)


State 121

   56 RELATIONAL: RELATIONAL GREATER ADDITIVE •
   61 ADDITIVE: ADDITIVE • '+' MULTIPLICATIVE
   62         | ADDITIVE • '-' MULTIPLICATIVE

    '+'  shift, and go to state 98
    '-'  shift, and go to state 99

    $default  reduce using rule 56 (RELATIONAL)


State 122

   57 RELATIONAL: RELATIONAL LESS ADDITIVE •
   61 ADDITIVE: ADDITIVE • '+' MULTIPLICATIVE
   62         | ADDITIVE • '-' MULTIPLICATIVE

    '+'  shift, and go to state 98
    '-'  shift, and go to state 99

    $default  reduce using rule 57 (RELATIONAL)


State 123

   61 ADDITIVE: ADDITIVE '+' MULTIPLICATIVE •
   64 MULTIPLICATIVE: MULTIPLICATIVE • '*' UNARY
   65               | MULTIPLICATIVE • '/' UNARY
   66               | MULTIPLICATIVE • '%' UNARY

    '*'  shift, and go to state 100
    '/'  shift, and go to state 101
    '%'  shift, and go to state 102

    $default  reduce using rule 61 (ADDITIVE)


State 124

   62 ADDITIVE: ADDITIVE '-' MULTIPLICATIVE •
   64 MULTIPLICATIVE: MULTIPLICATIVE • '*' UNARY
   65               | MULTIPLICATIVE • '/' UNARY
   66               | MULTIPLICATIVE • '%' UNARY

    '*'  shift, and go to state 100
    '/'  shift, and go to state 101
    '%'  shift, and go to state 102

    $default  reduce using rule 62 (ADDITIVE)


State 125

   64 MULTIPLICATIVE: MULTIPLICATIVE '*' UNARY •

    $default  reduce using rule 64 (MULTIPLICATIVE)


State 126

   65 MULTIPLICATIVE: MULTIPLICATIVE '/' UNARY •

    $default  reduce using rule 65 (MULTIPLICATIVE)


State 127

   66 MULTIPLICATIVE: MULTIPLICATIVE '%' UNARY •

    $default  reduce using rule 66 (MULTIPLICATIVE)


State 128

   27 DECLARATION: VARIABLE_TYPE IDENTIFIER '=' EXPRESSION •

    $default  reduce using rule 27 (DECLARATION)


State 129

   14 VARIABLE_TYPE: PRIMITIVE_TYPES '[' EXPRESSION ']' •

    $default  reduce using rule 14 (VARIABLE_TYPE)


State 130

   38 ARGUMENT_LIST: ARGUMENT_LIST ',' EXPRESSION •

    $default  reduce using rule 38 (ARGUMENT_LIST)


State 131

   29 ASSIGNMENT: IDENTIFIER '[' EXPRESSION ']' '=' • EXPRESSION

    IDENTIFIER     shift, and go to state 50
    INT            shift, and go to state 4
    FLOAT          shift, and go to state 5
    NOT_OP         shift, and go to state 51
    INT_LITERAL    shift, and go to state 52
    FLOAT_LITERAL  shift, and go to state 53
    '+'            shift, and go to state 54
    '-'            shift, and go to state 55
    '('            shift, and go to state 56

    FUNCTION_CALL    go to state 58
    PRIMITIVE_TYPES  go to state 59
    EXPRESSION       go to state 138
    LOGICAL_OR       go to state 61
    LOGICAL_AND      go to state 62
    EQUALITY         go to state 63
    RELATIONAL       go to state 64
    ADDITIVE         go to state 65
    MULTIPLICATIVE   go to state 66
    UNARY            go to state 67
    PRIMARY          go to state 68
    NUMBER           go to state 69


State 132

   31 PRINT: PRINTF '(' STRING_LITERAL ',' EXPRESSION_LIST • ')'
   33 EXPRESSION_LIST: EXPRESSION_LIST • ',' EXPRESSION

    ')'  shift, and go to state 139
    ','  shift, and go to state 140


State 133

   32 EXPRESSION_LIST: EXPRESSION •

    $default  reduce using rule 32 (EXPRESSION_LIST)


State 134

   41 IF_STATEMENT: IF '(' EXPRESSION ')' BLOCK •
   42             | IF '(' EXPRESSION ')' BLOCK • ELSE_CLAUSE

    ELSE  shift, and go to state 141

    $default  reduce using rule 41 (IF_STATEMENT)

    ELSE_CLAUSE  go to state 142


State 135

   45 WHILE_STATEMENT: WHILE '(' EXPRESSION ')' BLOCK •

    $default  reduce using rule 45 (WHILE_STATEMENT)


State 136

   73 PRIMARY: IDENTIFIER '[' EXPRESSION ']' •

    $default  reduce using rule 73 (PRIMARY)


State 137

   77 PRIMARY: PRIMITIVE_TYPES '(' EXPRESSION ')' •

    $default  reduce using rule 77 (PRIMARY)


State 138

   29 ASSIGNMENT: IDENTIFIER '[' EXPRESSION ']' '=' EXPRESSION •

    $default  reduce using rule 29 (ASSIGNMENT)


State 139

   31 PRINT: PRINTF '(' STRING_LITERAL ',' EXPRESSION_LIST ')' •

    $default  reduce using rule 31 (PRINT)


State 140

   33 EXPRESSION_LIST: EXPRESSION_LIST ',' • EXPRESSION

    IDENTIFIER     shift, and go to state 50
    INT            shift, and go to state 4
    FLOAT          shift, and go to state 5
    NOT_OP         shift, and go to state 51
    INT_LITERAL    shift, and go to state 52
    FLOAT_LITERAL  shift, and go to state 53
    '+'            shift, and go to state 54
    '-'            shift, and go to state 55
    '('            shift, and go to state 56

    FUNCTION_CALL    go to state 58
    PRIMITIVE_TYPES  go to state 59
    EXPRESSION       go to state 143
    LOGICAL_OR       go to state 61
    LOGICAL_AND      go to state 62
    EQUALITY         go to state 63
    RELATIONAL       go to state 64
    ADDITIVE         go to state 65
    MULTIPLICATIVE   go to state 66
    UNARY            go to state 67
    PRIMARY          go to state 68
    NUMBER           go to state 69


State 141

   43 ELSE_CLAUSE: ELSE • BLOCK
   44            | ELSE • IF_STATEMENT

    IF   shift, and go to state 28
    '{'  shift, and go to state 21

    BLOCK         go to state 144
    IF_STATEMENT  go to state 145


State 142

   42 IF_STATEMENT: IF '(' EXPRESSION ')' BLOCK ELSE_CLAUSE •

    $default  reduce using rule 42 (IF_STATEMENT)


State 143

   33 EXPRESSION_LIST: EXPRESSION_LIST ',' EXPRESSION •

    $default  reduce using rule 33 (EXPRESSION_LIST)


State 144

   43 ELSE_CLAUSE: ELSE BLOCK •

    $default  reduce using rule 43 (ELSE_CLAUSE)


State 145

   44 ELSE_CLAUSE: ELSE IF_STATEMENT •

    $default  reduce using rule 44 (ELSE_CLAUSE)
